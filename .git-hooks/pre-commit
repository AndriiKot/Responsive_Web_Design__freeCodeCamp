#!/usr/bin/env node

const path = require("node:path");
const { execSync } = require("node:child_process");
const fs = require("node:fs");

// execSync(`git clean -f ${undoChanges.join(' ')}`)   // if you '??'
// execSync('git restore ${}`)                         // if you 'AD', 'AM', 'M', 'D'
// execSync(`git restore --staged ${}`)                // if you 'A'


const gitStatusOutput = execSync('git status --porcelain', { encoding: 'utf-8' }).trim();
const gitStatusFullOutput = execSync('git status', { encoding: 'utf-8' }).trim();

const filePathBefore = path.join(__dirname, 'before-test-git-hooks.txt');

fs.writeFileSync(filePathBefore, `Git Status (--porcelain):
${gitStatusOutput}\n
Git Status (full):
${gitStatusFullOutput}`);

configCancelChangesFolders = [
  "Cat_Photo_App",
  "Magazine",
  "City_Skyline",

  // IN DEVELOPMENT:

  // "Cafe_Menu",
  // "Set_of_Colored_Markers",
  // "Registration_Form",
  // "Rothko_Painting",
  // "Photo_Gallery",
  // "Nutrition_Label",
  // "Quiz",
  // "Balance_Sheet",
  // "Cat_Painting",
  // "Piano",
  // "Penguin",
  // "Ferris_Wheel",
];

/*
configCancelChangesFolders.forEach((el, i, arr) => {
  execSync(`git restore ${el}`);
  execSync(`git restore --staged ${el}`);
  execSync(`git restore ${el}`);
  execSync(`git clean -f ${el}`);

});
*/

configCancelChangesFolders.reduce((_, el) => {
  execSync(`git restore ${el}`);
  execSync(`git restore --staged ${el}`);
  execSync(`git restore ${el}`);
  execSync(`git clean -f ${el}`);
  return null;
}, null);

const filePathAfter = path.join(__dirname, 'after-test-git-hooks.txt');

fs.writeFileSync(filePathAfter, `Git Status (--porcelain):
${gitStatusOutput}\n
Git Status (full):
${gitStatusFullOutput}`);


const hasChanges = execSync('git status --porcelain').toString().trim().length > 0;
execSync('git status --porcelain')

if (!hasChanges) {
  console.error('No changes left after restore and clean. Skipping commit.');
  execSync('exit 1');
}

console.log("hi!!")



